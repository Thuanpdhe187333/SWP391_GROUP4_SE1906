package dal;

import context.DBContext;
import model.Order;

import java.sql.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class OrderDAO {

    private Connection conn;

    public OrderDAO() throws SQLException {
        DBContext dbContext = new DBContext();
        this.conn = dbContext.getConnection();
    }

    public boolean insertOrder(Order order) throws SQLException {
        String sql = "INSERT INTO Orders (userId, orderDate, shippingAddress, totalAmount, status) VALUES (?, ?, ?, ?, ?)";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, order.getUserId());
            ps.setTimestamp(2, new Timestamp(order.getOrderDate().getTime()));
            ps.setString(3, order.getShippingAddress());
            ps.setDouble(4, order.getTotalAmount());
            ps.setString(5, order.getStatus());
            return ps.executeUpdate() > 0;
        }
    }

    // Update existing order
    public boolean updateOrder(Order order) throws SQLException {
        String sql = "UPDATE Orders SET userId=?, orderDate=?, shippingAddress=?, totalAmount=?, status=? WHERE orderId=?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, order.getUserId());
            ps.setTimestamp(2, new Timestamp(order.getOrderDate().getTime()));
            ps.setString(3, order.getShippingAddress());
            ps.setDouble(4, order.getTotalAmount());
            ps.setString(5, order.getStatus());
            ps.setInt(6, order.getOrderId());
            return ps.executeUpdate() > 0;
        }
    }

    // Delete order by orderId
    public boolean deleteOrder(int orderId) throws SQLException {
        String sql = "DELETE FROM Orders WHERE orderId=?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, orderId);
            return ps.executeUpdate() > 0;
        }
    }

    // Get order by orderId
    public Order getOrderById(int orderId) throws SQLException {
        String sql = "SELECT * FROM Orders WHERE orderId=?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, orderId);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return extractOrder(rs);
            }
        }
        return null;
    }

    // Get all orders
    public List<Order> getAllOrders() throws SQLException {
        List<Order> list = new ArrayList<>();
        String sql = "SELECT * FROM Orders";
        try (Statement st = conn.createStatement()) {
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                list.add(extractOrder(rs));
            }
        }
        return list;
    }

    // Get orders by userId
    public List<Order> getOrdersByUserId(int userId) throws SQLException {
        List<Order> list = new ArrayList<>();
        String sql = "SELECT * FROM Orders WHERE userId=?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, userId);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                list.add(extractOrder(rs));
            }
        }
        return list;
    }

    // Helper method to map ResultSet to Order object
    private Order extractOrder(ResultSet rs) throws SQLException {
        int orderId = rs.getInt("orderId");
        int userId = rs.getInt("userId");
        Date orderDate = new Date(rs.getTimestamp("orderDate").getTime());
        String shippingAddress = rs.getString("shippingAddress");
        double totalAmount = rs.getDouble("totalAmount");
        String status = rs.getString("status");
        return new Order(orderId, userId, orderDate, shippingAddress, totalAmount, status);
    }
}
