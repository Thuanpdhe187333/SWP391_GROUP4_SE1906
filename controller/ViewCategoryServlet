package controller;

import dao.CategoryDAO;
import java.io.IOException;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.util.List;
import model.Category;

public class ViewCategoryServlet extends HttpServlet {
    
    private static final int PAGE_SIZE = 5;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        CategoryDAO dao = new CategoryDAO();
        
        String keyword = request.getParameter("keyword");
        String parentFilter = request.getParameter("parentId");
        String sortField = request.getParameter("sortField");
        String sortOrder = request.getParameter("sortOrder");
        String pageStr = request.getParameter("page");
        
        int page = 1;
        if (pageStr != null) {
            try {
                page = Integer.parseInt(pageStr);
                if (page < 1) page = 1;
            } catch (NumberFormatException e) {
                page = 1;
            }
        }
        
        Integer parentIdFilter = null;
        if (parentFilter != null && !parentFilter.isEmpty()) {
            try {
                parentIdFilter = Integer.parseInt(parentFilter);
            } catch (NumberFormatException e) {
                parentIdFilter = null;
            }
        }

        List<Category> parentCategories = dao.getParentCategories();
        List<Category> categories = dao.searchCategories(keyword, parentIdFilter, sortField, sortOrder, page, PAGE_SIZE);
        
        int totalCategories = dao.countTotalCategories(keyword, parentIdFilter);
        int totalPages = (int) Math.ceil((double) totalCategories / PAGE_SIZE);
        
        request.setAttribute("categories", categories);
        request.setAttribute("parentCategories", parentCategories);
        request.setAttribute("keyword", keyword);
        request.setAttribute("parentIdFilter", parentIdFilter);
        request.setAttribute("sortField", sortField);
        request.setAttribute("sortOrder", sortOrder);
        request.setAttribute("currentPage", page);
        request.setAttribute("totalPages", totalPages);
        
        request.getRequestDispatcher("category.jsp").forward(request, response);
    }
}
